/* ==========================================================================
   suitcss-utils-flex
   ========================================================================== */


/**
 * https://github.com/suitcss/utils-flex
 */


/* Applies to flex container
   ========================================================================== */


/**
* Container
*/

.u-flex {
    display: flex !important;
}

.u-flexInline {
    display: inline-flex !important;
}


/**
* Direction: row
*/

.u-flexRow {
    flex-direction: row !important;
}

.u-flexRowReverse {
    flex-direction: row-reverse !important;
}


/**
* Direction: column
*/

.u-flexCol {
    flex-direction: column !important;
}

.u-flexColReverse {
    flex-direction: column-reverse !important;
}


/**
* Wrap
*/

.u-flexWrap {
    flex-wrap: wrap !important;
}

.u-flexNoWrap {
    flex-wrap: nowrap !important;
}

.u-flexWrapReverse {
    flex-wrap: wrap-reverse !important;
}


/**
* Align items along the main axis of the current line of the flex container
*/

.u-flexJustifyStart {
    justify-content: flex-start !important;
}

.u-flexJustifyEnd {
    justify-content: flex-end !important;
}

.u-flexJustifyCenter {
    justify-content: center !important;
}

.u-flexJustifyBetween {
    justify-content: space-between !important;
}

.u-flexJustifyAround {
    justify-content: space-around !important;
}


/**
* Align items in the cross axis of the current line of the flex container
* Similar to `justify-content` but in the perpendicular direction
*/

.u-flexAlignItemsStart {
    align-items: flex-start !important;
}

.u-flexAlignItemsEnd {
    align-items: flex-end !important;
}

.u-flexAlignItemsCenter {
    align-items: center !important;
}

.u-flexAlignItemsStretch {
    align-items: stretch !important;
}

.u-flexAlignItemsBaseline {
    align-items: baseline !important;
}


/**
* Aligns items within the flex container when there is extra
* space in the cross-axis
*
* Has no effect when there is only one line of flex items.
*/

.u-flexAlignContentStart {
    align-content: flex-start !important;
}

.u-flexAlignContentEnd {
    align-content: flex-end !important;
}

.u-flexAlignContentCenter {
    align-content: center !important;
}

.u-flexAlignContentStretch {
    align-content: stretch !important;
}

.u-flexAlignContentBetween {
    align-content: space-between !important;
}

.u-flexAlignContentAround {
    align-content: space-around !important;
}


/**
* 1. Set the flex-shrink default explicitly to fix IE10 - http://git.io/vllC7
*/


/* postcss-bem-linter: ignore */

.u-flex>*, .u-flexInline>* {
    flex-shrink: 1;
    /* 1 */
}


/* Applies to flex items
  ========================================================================== */


/**
* Override default alignment of single item when specified by `align-items`
*/

.u-flexAlignSelfStart {
    align-self: flex-start !important;
}

.u-flexAlignSelfEnd {
    align-self: flex-end !important;
}

.u-flexAlignSelfCenter {
    align-self: center !important;
}

.u-flexAlignSelfStretch {
    align-self: stretch !important;
}

.u-flexAlignSelfBaseline {
    align-self: baseline !important;
}

.u-flexAlignSelfAuto {
    align-self: auto !important;
}


/**
* Change order without editing underlying HTML
*/

.u-flexOrderFirst {
    order: -1 !important;
}

.u-flexOrderLast {
    order: 1 !important;
}

.u-flexOrderNone {
    order: 0 !important;
}


/**
* Specify the flex grow factor, which determines how much the flex item will
* grow relative to the rest of the flex items in the flex container.
*
* Supports 1-5 proportions
*
* 1. Provide all values to avoid IE10 bug with shorthand flex
*    - http://git.io/vllC7
*
*    Use `0%` to avoid bug in IE10/11 with unitless flex basis. Using this
*    instead of `auto` as this matches what the default would be with `flex`
*    shorthand - http://git.io/vllWx
*/

.u-flexGrow1 {
    flex: 1 1 0% !important;
    /* 1 */
}

.u-flexGrow2 {
    flex: 2 1 0% !important;
}

.u-flexGrow3 {
    flex: 3 1 0% !important;
}

.u-flexGrow4 {
    flex: 4 1 0% !important;
}

.u-flexGrow5 {
    flex: 5 1 0% !important;
}


/**
* Aligning with `auto` margins
* http://www.w3.org/TR/css-flexbox-1/#auto-margins
*/

.u-flexExpand {
    margin: auto !important;
}

.u-flexExpandLeft {
    margin-left: auto !important;
}

.u-flexExpandRight {
    margin-right: auto !important;
}

.u-flexExpandTop {
    margin-top: auto !important;
}

.u-flexExpandBottom {
    margin-bottom: auto !important;
}

@media (min-width: 768px) {
    /* Applies to flex container
     ======================================================================== */
    /**
   * Container
   */
    .u-sm-flex {
        display: flex !important;
    }
    .u-sm-flexInline {
        display: inline-flex !important;
    }
    /**
   * Direction: row
   */
    .u-sm-flexRow {
        flex-direction: row !important;
    }
    .u-sm-flexRowReverse {
        flex-direction: row-reverse !important;
    }
    /**
   * Direction: column
   */
    .u-sm-flexCol {
        flex-direction: column !important;
    }
    .u-sm-flexColReverse {
        flex-direction: column-reverse !important;
    }
    /**
   * Wrap
   */
    .u-sm-flexWrap {
        flex-wrap: wrap !important;
    }
    .u-sm-flexNoWrap {
        flex-wrap: nowrap !important;
    }
    .u-sm-flexWrapReverse {
        flex-wrap: wrap-reverse !important;
    }
    /**
   * Align items along the main axis of the current line of the flex container
   */
    .u-sm-flexJustifyStart {
        justify-content: flex-start !important;
    }
    .u-sm-flexJustifyEnd {
        justify-content: flex-end !important;
    }
    .u-sm-flexJustifyCenter {
        justify-content: center !important;
    }
    .u-sm-flexJustifyBetween {
        justify-content: space-between !important;
    }
    .u-sm-flexJustifyAround {
        justify-content: space-around !important;
    }
    /**
   * Align items in the cross axis of the current line of the flex container
   * Similar to `justify-content` but in the perpendicular direction
   */
    .u-sm-flexAlignItemsStart {
        align-items: flex-start !important;
    }
    .u-sm-flexAlignItemsEnd {
        align-items: flex-end !important;
    }
    .u-sm-flexAlignItemsCenter {
        align-items: center !important;
    }
    .u-sm-flexAlignItemsStretch {
        align-items: stretch !important;
    }
    .u-sm-flexAlignItemsBaseline {
        align-items: baseline !important;
    }
    /**
   * Aligns items within the flex container when there is extra
   * space in the cross-axis
   *
   * Has no effect when there is only one line of flex items.
   */
    .u-sm-flexAlignContentStart {
        align-content: flex-start !important;
    }
    .u-sm-flexAlignContentEnd {
        align-content: flex-end !important;
    }
    .u-sm-flexAlignContentCenter {
        align-content: center !important;
    }
    .u-sm-flexAlignContentStretch {
        align-content: stretch !important;
    }
    .u-sm-flexAlignContentBetween {
        align-content: space-between !important;
    }
    .u-sm-flexAlignContentAround {
        align-content: space-around !important;
    }
    /**
   * 1. Set the flex-shrink default explicitly to fix IE10 - http://git.io/vllC7
   */
    /* postcss-bem-linter: ignore */
    .u-sm-flex>*, .u-sm-flexInline>* {
        flex-shrink: 1;
        /* 1 */
    }
    /* Applies to flex items
     ======================================================================== */
    /**
   * Override default alignment of single item when specified by `align-items`
   */
    .u-sm-flexAlignSelfStart {
        align-self: flex-start !important;
    }
    .u-sm-flexAlignSelfEnd {
        align-self: flex-end !important;
    }
    .u-sm-flexAlignSelfCenter {
        align-self: center !important;
    }
    .u-sm-flexAlignSelfStretch {
        align-self: stretch !important;
    }
    .u-sm-flexAlignSelfBaseline {
        align-self: baseline !important;
    }
    .u-sm-flexAlignSelfAuto {
        align-self: auto !important;
    }
    /**
   * Change order without editing underlying HTML
   */
    .u-sm-flexOrderFirst {
        order: -1 !important;
    }
    .u-sm-flexOrderLast {
        order: 1 !important;
    }
    .u-sm-flexOrderNone {
        order: 0 !important;
    }
    /**
   * Specify the flex grow factor, which determines how much the flex item will
   * grow relative to the rest of the flex items in the flex container.
   *
   * Supports 1-5 proportions
   *
   * 1. Provide all values to avoid IE10 bug with shorthand flex
   *    http://git.io/vllC7
   *
   *    Use `0%` to avoid bug in IE10/11 with unitless flex basis
   *    http://git.io/vllWx
   */
    .u-sm-flexGrow1 {
        flex: 1 1 0% !important;
        /* 1 */
    }
    .u-sm-flexGrow2 {
        flex: 2 1 0% !important;
    }
    .u-sm-flexGrow3 {
        flex: 3 1 0% !important;
    }
    .u-sm-flexGrow4 {
        flex: 4 1 0% !important;
    }
    .u-sm-flexGrow5 {
        flex: 5 1 0% !important;
    }
    /**
   * Aligning with `auto` margins
   * http://www.w3.org/TR/css-flexbox-1/#auto-margins
   */
    .u-sm-flexExpand {
        margin: auto !important;
    }
    .u-sm-flexExpandLeft {
        margin-left: auto !important;
    }
    .u-sm-flexExpandRight {
        margin-right: auto !important;
    }
    .u-sm-flexExpandTop {
        margin-top: auto !important;
    }
    .u-sm-flexExpandBottom {
        margin-bottom: auto !important;
    }
}

@media (min-width: 992px) {
    /* Applies to flex container
     ======================================================================== */
    /**
   * Container
   */
    .u-md-flex {
        display: flex !important;
    }
    .u-md-flexInline {
        display: inline-flex !important;
    }
    /**
   * Direction: row
   */
    .u-md-flexRow {
        flex-direction: row !important;
    }
    .u-md-flexRowReverse {
        flex-direction: row-reverse !important;
    }
    /**
   * Direction: column
   */
    .u-md-flexCol {
        flex-direction: column !important;
    }
    .u-md-flexColReverse {
        flex-direction: column-reverse !important;
    }
    /**
   * Wrap
   */
    .u-md-flexWrap {
        flex-wrap: wrap !important;
    }
    .u-md-flexNoWrap {
        flex-wrap: nowrap !important;
    }
    .u-md-flexWrapReverse {
        flex-wrap: wrap-reverse !important;
    }
    /**
   * Align items along the main axis of the current line of the flex container
   */
    .u-md-flexJustifyStart {
        justify-content: flex-start !important;
    }
    .u-md-flexJustifyEnd {
        justify-content: flex-end !important;
    }
    .u-md-flexJustifyCenter {
        justify-content: center !important;
    }
    .u-md-flexJustifyBetween {
        justify-content: space-between !important;
    }
    .u-md-flexJustifyAround {
        justify-content: space-around !important;
    }
    /**
   * Align items in the cross axis of the current line of the flex container
   * Similar to `justify-content` but in the perpendicular direction
   */
    .u-md-flexAlignItemsStart {
        align-items: flex-start !important;
    }
    .u-md-flexAlignItemsEnd {
        align-items: flex-end !important;
    }
    .u-md-flexAlignItemsCenter {
        align-items: center !important;
    }
    .u-md-flexAlignItemsStretch {
        align-items: stretch !important;
    }
    .u-md-flexAlignItemsBaseline {
        align-items: baseline !important;
    }
    /**
   * Aligns items within the flex container when there is extra
   * space in the cross-axis
   *
   * Has no effect when there is only one line of flex items.
   */
    .u-md-flexAlignContentStart {
        align-content: flex-start !important;
    }
    .u-md-flexAlignContentEnd {
        align-content: flex-end !important;
    }
    .u-md-flexAlignContentCenter {
        align-content: center !important;
    }
    .u-md-flexAlignContentStretch {
        align-content: stretch !important;
    }
    .u-md-flexAlignContentBetween {
        align-content: space-between !important;
    }
    .u-md-flexAlignContentAround {
        align-content: space-around !important;
    }
    /**
   * 1. Set the flex-shrink default explicitly to fix IE10 - http://git.io/vllC7
   */
    /* postcss-bem-linter: ignore */
    .u-md-flex>*, .u-md-flexInline>* {
        flex-shrink: 1;
        /* 1 */
    }
    /* Applies to flex items
     ======================================================================== */
    /**
   * Override default alignment of single item when specified by `align-items`
   */
    .u-md-flexAlignSelfStart {
        align-self: flex-start !important;
    }
    .u-md-flexAlignSelfEnd {
        align-self: flex-end !important;
    }
    .u-md-flexAlignSelfCenter {
        align-self: center !important;
    }
    .u-md-flexAlignSelfStretch {
        align-self: stretch !important;
    }
    .u-md-flexAlignSelfBaseline {
        align-self: baseline !important;
    }
    .u-md-flexAlignSelfAuto {
        align-self: auto !important;
    }
    /**
   * Change order without editing underlying HTML
   */
    .u-md-flexOrderFirst {
        order: -1 !important;
    }
    .u-md-flexOrderLast {
        order: 1 !important;
    }
    .u-md-flexOrderNone {
        order: 0 !important;
    }
    /**
   * Specify the flex grow factor, which determines how much the flex item will
   * grow relative to the rest of the flex items in the flex container.
   *
   * Supports 1-5 proportions
   *
   * 1. Provide all values to avoid IE10 bug with shorthand flex
   *    http://git.io/vllC7
   *
   *    Use `0%` to avoid bug in IE10/11 with unitless flex basis
   *    http://git.io/vllWx
   */
    .u-md-flexGrow1 {
        flex: 1 1 0% !important;
        /* 1 */
    }
    .u-md-flexGrow2 {
        flex: 2 1 0% !important;
    }
    .u-md-flexGrow3 {
        flex: 3 1 0% !important;
    }
    .u-md-flexGrow4 {
        flex: 4 1 0% !important;
    }
    .u-md-flexGrow5 {
        flex: 5 1 0% !important;
    }
    /**
   * Aligning with `auto` margins
   * http://www.w3.org/TR/css-flexbox-1/#auto-margins
   */
    .u-md-flexExpand {
        margin: auto !important;
    }
    .u-md-flexExpandLeft {
        margin-left: auto !important;
    }
    .u-md-flexExpandRight {
        margin-right: auto !important;
    }
    .u-md-flexExpandTop {
        margin-top: auto !important;
    }
    .u-md-flexExpandBottom {
        margin-bottom: auto !important;
    }
}

@media (min-width: 1200px) {
    /* Applies to flex container
     ======================================================================== */
    /**
   * Container
   */
    .u-lg-flex {
        display: flex !important;
    }
    .u-lg-flexInline {
        display: inline-flex !important;
    }
    /**
   * Direction: row
   */
    .u-lg-flexRow {
        flex-direction: row !important;
    }
    .u-lg-flexRowReverse {
        flex-direction: row-reverse !important;
    }
    /**
   * Direction: column
   */
    .u-lg-flexCol {
        flex-direction: column !important;
    }
    .u-lg-flexColReverse {
        flex-direction: column-reverse !important;
    }
    /**
   * Wrap
   */
    .u-lg-flexWrap {
        flex-wrap: wrap !important;
    }
    .u-lg-flexNoWrap {
        flex-wrap: nowrap !important;
    }
    .u-lg-flexWrapReverse {
        flex-wrap: wrap-reverse !important;
    }
    /**
   * Align items along the main axis of the current line of the flex container
   */
    .u-lg-flexJustifyStart {
        justify-content: flex-start !important;
    }
    .u-lg-flexJustifyEnd {
        justify-content: flex-end !important;
    }
    .u-lg-flexJustifyCenter {
        justify-content: center !important;
    }
    .u-lg-flexJustifyBetween {
        justify-content: space-between !important;
    }
    .u-lg-flexJustifyAround {
        justify-content: space-around !important;
    }
    /**
   * Align items in the cross axis of the current line of the flex container
   * Similar to `justify-content` but in the perpendicular direction
   */
    .u-lg-flexAlignItemsStart {
        align-items: flex-start !important;
    }
    .u-lg-flexAlignItemsEnd {
        align-items: flex-end !important;
    }
    .u-lg-flexAlignItemsCenter {
        align-items: center !important;
    }
    .u-lg-flexAlignItemsStretch {
        align-items: stretch !important;
    }
    .u-lg-flexAlignItemsBaseline {
        align-items: baseline !important;
    }
    /**
   * Aligns items within the flex container when there is extra
   * space in the cross-axis
   *
   * Has no effect when there is only one line of flex items.
   */
    .u-lg-flexAlignContentStart {
        align-content: flex-start !important;
    }
    .u-lg-flexAlignContentEnd {
        align-content: flex-end !important;
    }
    .u-lg-flexAlignContentCenter {
        align-content: center !important;
    }
    .u-lg-flexAlignContentStretch {
        align-content: stretch !important;
    }
    .u-lg-flexAlignContentBetween {
        align-content: space-between !important;
    }
    .u-lg-flexAlignContentAround {
        align-content: space-around !important;
    }
    /**
   * 1. Set the flex-shrink default explicitly to fix IE10 - http://git.io/vllC7
   */
    /* postcss-bem-linter: ignore */
    .u-lg-flex>*, .u-lg-flexInline>* {
        flex-shrink: 1;
        /* 1 */
    }
    /* Applies to flex items
     ======================================================================== */
    /**
   * Override default alignment of single item when specified by `align-items`
   */
    .u-lg-flexAlignSelfStart {
        align-self: flex-start !important;
    }
    .u-lg-flexAlignSelfEnd {
        align-self: flex-end !important;
    }
    .u-lg-flexAlignSelfCenter {
        align-self: center !important;
    }
    .u-lg-flexAlignSelfStretch {
        align-self: stretch !important;
    }
    .u-lg-flexAlignSelfBaseline {
        align-self: baseline !important;
    }
    .u-lg-flexAlignSelfAuto {
        align-self: auto !important;
    }
    /**
   * Change order without editing underlying HTML
   */
    .u-lg-flexOrderFirst {
        order: -1 !important;
    }
    .u-lg-flexOrderLast {
        order: 1 !important;
    }
    .u-lg-flexOrderNone {
        order: 0 !important;
    }
    /**
   * Specify the flex grow factor, which determines how much the flex item will
   * grow relative to the rest of the flex items in the flex container.
   *
   * Supports 1-5 proportions
   *
   * 1. Provide all values to avoid IE10 bug with shorthand flex
   *    http://git.io/vllC7
   *
   *    Use `0%` to avoid bug in IE10/11 with unitless flex basis
   *    http://git.io/vllWx
   */
    .u-lg-flexGrow1 {
        flex: 1 1 0% !important;
        /* 1 */
    }
    .u-lg-flexGrow2 {
        flex: 2 1 0% !important;
    }
    .u-lg-flexGrow3 {
        flex: 3 1 0% !important;
    }
    .u-lg-flexGrow4 {
        flex: 4 1 0% !important;
    }
    .u-lg-flexGrow5 {
        flex: 5 1 0% !important;
    }
    /**
   * Aligning with `auto` margins
   * http://www.w3.org/TR/css-flexbox-1/#auto-margins
   */
    .u-lg-flexExpand {
        margin: auto !important;
    }
    .u-lg-flexExpandLeft {
        margin-left: auto !important;
    }
    .u-lg-flexExpandRight {
        margin-right: auto !important;
    }
    .u-lg-flexExpandTop {
        margin-top: auto !important;
    }
    .u-lg-flexExpandBottom {
        margin-bottom: auto !important;
    }
}


/* ==========================================================================
   suitcss-utils-size
   ========================================================================== */


/**
 * https://github.com/suitcss/utils-size
 */


 /* Intrinsic widths
    ========================================================================== */

 /**
  * Make an element shrink wrap its content.
  */

 .u-sizeFit {
   flex-basis: auto !important;
 }

 /**
  * Make an element fill the remaining space.
  *
  * 1. Be explicit to work around IE10 bug with shorthand flex
  *    http://git.io/vllC7
  * 2. IE10 ignores previous `flex-basis` value. Setting again here fixes
  *    http://git.io/vllMt
  */

 .u-sizeFill {
   flex: 1 1 0% !important; /* 1 */
   flex-basis: 0% !important; /* 2 */
 }

 /**
  * An alternative method to make an element fill the remaining space.
  * Distributes space based on the initial width and height of the element
  *
  * http://www.w3.org/TR/css-flexbox/images/rel-vs-abs-flex.svg
  */

 .u-sizeFillAlt {
   flex: 1 1 auto !important;
   flex-basis: auto !important;
 }

 /**
  * Make an element the width of its parent.
  */

 .u-sizeFull {
   width: 100% !important;
 }

 /* Proportional widths
    ========================================================================== */


 /**
  *
  * 1. Use `flex-basis: auto` with a width to avoid box-sizing bug in IE10/11
  *    http://git.io/vllMD
  */

 .col-xs-1, .col-sm-1, .col-md-1, .col-lg-1, .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2, .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3, .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4, .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5, .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6, .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7, .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8, .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9, .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10, .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11, .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12 {
   flex-basis: auto !important;
   /* 1 */
 }

 /* ==========================================================================
    suitcss-utils-position
    ========================================================================== */


 /**
  * https://github.com/suitcss/utils-position
  */

  .u-posFit,
  .u-posAbsoluteCenter,
  .u-posAbsolute {
    position: absolute !important;
  }

  /**
   * Element will be centered to its nearest relatively-positioned
   * ancestor.
   */

  .u-posFixedCenter,
  .u-posAbsoluteCenter {
    left: 50% !important;
    top: 50% !important;
    transform: translate(-50%, -50%) !important;
  }

  .u-posFit,
  .u-posFullScreen {
    bottom: 0 !important;
    left: 0 !important;
    margin: auto !important;
    right: 0 !important;
    top: 0 !important;
  }

  /**
   * 1. Make sure fixed elements are promoted into a new layer, for performance
   *    reasons.
   */

  .u-posFullScreen,
  .u-posFixedCenter,
  .u-posFixed {
    backface-visibility: hidden; /* 1 */
    position: fixed !important;
  }

  .u-posRelative {
    position: relative !important;
  }

  .u-posStatic {
    position: static !important;
  }

  /**
  * 1. only firefox
  *
  */

  .u-posSticky {
    position: sticky; /* 1 */
    top: 0;
  }

/* ==========================================================================
   suitcss-utils-display
   ========================================================================== */


/**
 * https://github.com/suitcss/utils-display
 */

 .u-block {
   display: block !important;
 }

 .u-hidden {
   display: none !important;
 }

 /**
  * Completely remove from the flow but leave available to screen readers.
  */

 .u-hiddenVisually {
   border: 0 !important;
   clip: rect(1px, 1px, 1px, 1px) !important;
   height: 1px !important;
   overflow: hidden !important;
   padding: 0 !important;
   position: absolute !important;
   width: 1px !important;
 }

 .u-inline {
   display: inline !important;
 }

 /**
  * 1. Fix for Firefox bug: an image styled `max-width:100%` within an
  * inline-block will display at its default size, and not limit its width to
  * 100% of an ancestral container.
  */

 .u-inlineBlock {
   display: inline-block !important;
   max-width: 100%; /* 1 */
 }

 .u-table {
   display: table !important;
 }

 .u-tableCell {
   display: table-cell !important;
 }

 .u-tableRow {
   display: table-row !important;
 }
